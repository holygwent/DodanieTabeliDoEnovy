
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.Types;
using Soneta.Towary;
using testTworzenieTabel.TowarCennyDodatkowe;

[assembly: ModuleType("TowarCennyDodatkowe", typeof(testTworzenieTabel.TowarCennyDodatkowe.TowarCennyDodatkoweModule), 4, "TowarCennyDodatkowe", 1, VersionNumber=27)]

namespace testTworzenieTabel.TowarCennyDodatkowe {

	/// <summary>
	/// Moduł TowarCennyDodatkowe.
	/// <seealso cref="Soneta.Types"/>
	/// <seealso cref="Soneta.Towary"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class TowarCennyDodatkoweModule : Module {

		public static TowarCennyDodatkoweModule GetInstance(ISessionable session) => (TowarCennyDodatkoweModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new TowarCennyDodatkoweModule(session)) {
		};

		TowarCennyDodatkoweModule(Session session) : base(session) {}

		private TowaryModule moduleTowary;

		[Browsable(false)]
		public TowaryModule Towary => moduleTowary ?? (moduleTowary = TowaryModule.GetInstance(Session));

		public static readonly Soneta.Business.App.TableInfo CennyDodatkoweTableInfo = new Soneta.Business.App.TableInfo.Create<CennyDodatkowe, CennaDodatkowa, CennaDodatkowaRecord>("CennaDod") {
		};

		public CennyDodatkowe CennyDodatkowe => (CennyDodatkowe)Session.Tables[CennyDodatkoweTableInfo];

		private static Soneta.Business.App.KeyInfo keyInfoCennaDodatkowaTowar = new Soneta.Business.App.KeyInfo(CennyDodatkoweTableInfo, table => new CennaDodatkowaTable.TowarRelation(table)) {
			Name = "CennaDodatkowa_Towar",
			RelationTo = "Towar",
			DeleteCascade = true,
			PrimaryRelation = true,
			Guided = RelationGuidedType.Inner,
			CollectionName = "Fields",
			SubTableCreator = (st, row) => new SubTable<CennaDodatkowa>(st, row),
			KeyFields = new[] {"Towar", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoCennaDodatkowaWgTowaru = new Soneta.Business.App.KeyInfo(CennyDodatkoweTableInfo, table => new CennaDodatkowaTable.WgTowaruKey(table)) {
			Name = "WgTowaru",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Towar"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów CennaDodatkowa.
		/// Dziedzicząca klasa <see cref="CennyDodatkowe"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="CennyDodatkowe"/>
		/// <seealso cref="CennaDodatkowaRow"/>
		/// <seealso cref="CennaDodatkowa"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Cenny Dodatkowe")]
		public abstract partial class CennaDodatkowaTable : Table {

			protected CennaDodatkowaTable() {}

			public partial class TowarRelation : Key<CennaDodatkowa> {
				internal TowarRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((CennaDodatkowaRecord)rec).Towar,
					row.ID
				};

				public SubTable<CennaDodatkowa> this[Towar towar] => new SubTable<CennaDodatkowa>(this, towar);
			}

			public TowarRelation WgTowar => (TowarRelation)Session.Keys[keyInfoCennaDodatkowaTowar];

			public partial class WgTowaruKey : Key<CennaDodatkowa> {
				internal WgTowaruKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((CennaDodatkowaRecord)rec).Towar
				};

				public CennaDodatkowa this[Towar towar] => (CennaDodatkowa)Find(towar);
			}

			public WgTowaruKey WgTowaru => (WgTowaruKey)Session.Keys[keyInfoCennaDodatkowaWgTowaru];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="TowarCennyDodatkoweModule"/>
			public new TowarCennyDodatkoweModule Module => (TowarCennyDodatkoweModule)base.Module;

			public System.Linq.IQueryable<CennaDodatkowa> AsQuery() => AsQuery<CennaDodatkowa>();

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="CennaDodatkowa"/>
			public new CennaDodatkowa this[int id] => (CennaDodatkowa)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="CennaDodatkowa"/>
			public new CennaDodatkowa[] this[int[] ids] => (CennaDodatkowa[])base[ids];

			protected override Row CreateRow(RowCreator creator) => new CennaDodatkowa(creator);

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Towar");
				names.Append(divider); names.Append("CenaNettoValue");
				names.Append(divider); names.Append("CenaNettoSymbol");
				names.Append(divider); names.Append("CenaBruttoValue");
				names.Append(divider); names.Append("CenaBruttoSymbol");
				names.Append(divider); names.Append("DataOd");
				names.Append(divider); names.Append("DataDo");
			}

		}

		public abstract partial class CennaDodatkowaRow : Row {

			private CennaDodatkowaRecord record;

			protected override void AssignRecord(Record rec) {
				record = (CennaDodatkowaRecord)rec;
			}

			protected CennaDodatkowaRow(RowCreator creator) : base(false) {}
			protected CennaDodatkowaRow([Required] Towar towar) : base(true) {
				if (towar==null) throw new RequiredException(this, "Towar");
				GetRecord();
				record.Towar = towar;
			}

			protected override Row PrimaryRow => (Row)Towar;

			[Caption("Towar")]
			[Required]
			public Towar Towar {
				get {
					if (record==null) GetRecord();
					return (Towar)GetRowReference(ref record.Towar);
				}
			}

			[Required]
			public DoubleCy CenaNetto {
				get {
					if (record==null) GetRecord();
					return record.CenaNetto;
				}
				set {
					CennaDodatkowaSchema.CenaNettoBeforeEdit?.Invoke((CennaDodatkowa)this, ref value);
					if (value==DoubleCy.Zero) throw new RequiredException(this, "CenaNetto");
					GetEdit(record==null, false);
					record.CenaNetto = value;
					CennaDodatkowaSchema.CenaNettoAfterEdit?.Invoke((CennaDodatkowa)this);
				}
			}

			[Required]
			public DoubleCy CenaBrutto {
				get {
					if (record==null) GetRecord();
					return record.CenaBrutto;
				}
				set {
					CennaDodatkowaSchema.CenaBruttoBeforeEdit?.Invoke((CennaDodatkowa)this, ref value);
					if (value==DoubleCy.Zero) throw new RequiredException(this, "CenaBrutto");
					GetEdit(record==null, false);
					record.CenaBrutto = value;
					CennaDodatkowaSchema.CenaBruttoAfterEdit?.Invoke((CennaDodatkowa)this);
				}
			}

			[Required]
			public Date DataOd {
				get {
					if (record==null) GetRecord();
					return record.DataOd;
				}
				set {
					CennaDodatkowaSchema.DataOdBeforeEdit?.Invoke((CennaDodatkowa)this, ref value);
					if (value==Date.MinValue) throw new RequiredException(this, "DataOd");
					GetEdit(record==null, false);
					record.DataOd = value;
					CennaDodatkowaSchema.DataOdAfterEdit?.Invoke((CennaDodatkowa)this);
				}
			}

			[Required]
			public Date DataDo {
				get {
					if (record==null) GetRecord();
					return record.DataDo;
				}
				set {
					CennaDodatkowaSchema.DataDoBeforeEdit?.Invoke((CennaDodatkowa)this, ref value);
					if (value==Date.MinValue) throw new RequiredException(this, "DataDo");
					GetEdit(record==null, false);
					record.DataDo = value;
					CennaDodatkowaSchema.DataDoAfterEdit?.Invoke((CennaDodatkowa)this);
				}
			}

			[Browsable(false)]
			public new CennyDodatkowe Table => (CennyDodatkowe)base.Table;

			[Browsable(false)]
			public TowarCennyDodatkoweModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => CennyDodatkoweTableInfo;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				CennaDodatkowaSchema.OnCalcObjectRight?.Invoke((CennaDodatkowa)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				CennaDodatkowaSchema.OnCalcParentsObjectRight?.Invoke((CennaDodatkowa)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				CennaDodatkowaSchema.OnCalcReadOnly?.Invoke((CennaDodatkowa)this, ref result);
				return result;
			}

			class CenaNettoRequiredVerifier : RequiredVerifier {
				internal CenaNettoRequiredVerifier(IRow row) : base(row, "CenaNetto") {
				}
				protected override bool IsValid() => !(((CennaDodatkowaRow)Row).CenaNetto==DoubleCy.Zero);
			}

			class CenaBruttoRequiredVerifier : RequiredVerifier {
				internal CenaBruttoRequiredVerifier(IRow row) : base(row, "CenaBrutto") {
				}
				protected override bool IsValid() => !(((CennaDodatkowaRow)Row).CenaBrutto==DoubleCy.Zero);
			}

			class DataOdRequiredVerifier : RequiredVerifier {
				internal DataOdRequiredVerifier(IRow row) : base(row, "DataOd") {
				}
				protected override bool IsValid() => !(((CennaDodatkowaRow)Row).DataOd==Date.MinValue);
			}

			class DataDoRequiredVerifier : RequiredVerifier {
				internal DataDoRequiredVerifier(IRow row) : base(row, "DataDo") {
				}
				protected override bool IsValid() => !(((CennaDodatkowaRow)Row).DataDo==Date.MinValue);
			}

			protected override void OnAdded() {
				base.OnAdded();
				System.Diagnostics.Debug.Assert(record.Towar==null || record.Towar.State==RowState.Detached || Session==record.Towar.Session);
				Session.Verifiers.Add(new CenaNettoRequiredVerifier(this));
				Session.Verifiers.Add(new CenaBruttoRequiredVerifier(this));
				Session.Verifiers.Add(new DataOdRequiredVerifier(this));
				Session.Verifiers.Add(new DataDoRequiredVerifier(this));
				CennaDodatkowaSchema.OnAdded?.Invoke((CennaDodatkowa)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				CennaDodatkowaSchema.OnLoaded?.Invoke((CennaDodatkowa)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				CennaDodatkowaSchema.OnEditing?.Invoke((CennaDodatkowa)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				CennaDodatkowaSchema.OnDeleting?.Invoke((CennaDodatkowa)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				CennaDodatkowaSchema.OnDeleted?.Invoke((CennaDodatkowa)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				CennaDodatkowaSchema.OnRepacked?.Invoke((CennaDodatkowa)this);
			}

			protected override void LockGuidedRoot() => LockGuidedRoot((Row)Towar);

			public override GuidedRow GetGuidedRoot() => ((Row)Towar)?.GetGuidedRoot();

		}

		public sealed class CennaDodatkowaRecord : Record {
			[Required]
			[ParentTable("Towar")]
			public IRow Towar;
			[Required]
			public DoubleCy CenaNetto;
			[Required]
			public DoubleCy CenaBrutto;
			[Required]
			public Date DataOd;
			[Required]
			public Date DataDo;

			public override Record Clone() {
				CennaDodatkowaRecord rec = (CennaDodatkowaRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Towar = creator.Read_Row("Towary");
				CenaNetto = creator.Read_doublecy();
				CenaBrutto = creator.Read_doublecy();
				DataOd = creator.Read_date();
				DataDo = creator.Read_date();
			}
		}

		public static class CennaDodatkowaSchema {

			internal static RowDelegate<CennaDodatkowaRow, DoubleCy> CenaNettoBeforeEdit;
			public static void AddCenaNettoBeforeEdit(RowDelegate<CennaDodatkowaRow, DoubleCy> value)
				=> CenaNettoBeforeEdit = (RowDelegate<CennaDodatkowaRow, DoubleCy>)Delegate.Combine(CenaNettoBeforeEdit, value);

			internal static RowDelegate<CennaDodatkowaRow> CenaNettoAfterEdit;
			public static void AddCenaNettoAfterEdit(RowDelegate<CennaDodatkowaRow> value)
				=> CenaNettoAfterEdit = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(CenaNettoAfterEdit, value);

			internal static RowDelegate<CennaDodatkowaRow, DoubleCy> CenaBruttoBeforeEdit;
			public static void AddCenaBruttoBeforeEdit(RowDelegate<CennaDodatkowaRow, DoubleCy> value)
				=> CenaBruttoBeforeEdit = (RowDelegate<CennaDodatkowaRow, DoubleCy>)Delegate.Combine(CenaBruttoBeforeEdit, value);

			internal static RowDelegate<CennaDodatkowaRow> CenaBruttoAfterEdit;
			public static void AddCenaBruttoAfterEdit(RowDelegate<CennaDodatkowaRow> value)
				=> CenaBruttoAfterEdit = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(CenaBruttoAfterEdit, value);

			internal static RowDelegate<CennaDodatkowaRow, Date> DataOdBeforeEdit;
			public static void AddDataOdBeforeEdit(RowDelegate<CennaDodatkowaRow, Date> value)
				=> DataOdBeforeEdit = (RowDelegate<CennaDodatkowaRow, Date>)Delegate.Combine(DataOdBeforeEdit, value);

			internal static RowDelegate<CennaDodatkowaRow> DataOdAfterEdit;
			public static void AddDataOdAfterEdit(RowDelegate<CennaDodatkowaRow> value)
				=> DataOdAfterEdit = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(DataOdAfterEdit, value);

			internal static RowDelegate<CennaDodatkowaRow, Date> DataDoBeforeEdit;
			public static void AddDataDoBeforeEdit(RowDelegate<CennaDodatkowaRow, Date> value)
				=> DataDoBeforeEdit = (RowDelegate<CennaDodatkowaRow, Date>)Delegate.Combine(DataDoBeforeEdit, value);

			internal static RowDelegate<CennaDodatkowaRow> DataDoAfterEdit;
			public static void AddDataDoAfterEdit(RowDelegate<CennaDodatkowaRow> value)
				=> DataDoAfterEdit = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(DataDoAfterEdit, value);

			internal static RowDelegate<CennaDodatkowaRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<CennaDodatkowaRow> value)
				=> OnLoaded = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<CennaDodatkowaRow> OnAdded;
			public static void AddOnAdded(RowDelegate<CennaDodatkowaRow> value)
				=> OnAdded = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<CennaDodatkowaRow> OnEditing;
			public static void AddOnEditing(RowDelegate<CennaDodatkowaRow> value)
				=> OnEditing = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<CennaDodatkowaRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<CennaDodatkowaRow> value)
				=> OnDeleting = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<CennaDodatkowaRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<CennaDodatkowaRow> value)
				=> OnDeleted = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<CennaDodatkowaRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<CennaDodatkowaRow> value)
				=> OnRepacked = (RowDelegate<CennaDodatkowaRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<CennaDodatkowaRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<CennaDodatkowaRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<CennaDodatkowaRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<CennaDodatkowaRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<CennaDodatkowaRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<CennaDodatkowaRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<CennaDodatkowaRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<CennaDodatkowaRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<CennaDodatkowaRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsTowarCennyDodatkoweModule {
		public static TowarCennyDodatkoweModule GetTowarCennyDodatkowe(this Session session) => TowarCennyDodatkoweModule.GetInstance(session);

		public static TResult Record<TResult>(this IRecordInvoker<CennaDodatkowa, TResult> row, Action<TowarCennyDodatkoweModule.CennaDodatkowaRecord> action)
		    => row.InvokeAction(action, (rec, act) => ((Action<TowarCennyDodatkoweModule.CennaDodatkowaRecord>)act)((TowarCennyDodatkoweModule.CennaDodatkowaRecord)rec));
	}

}

